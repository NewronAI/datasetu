generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum question_type {
  checkbox
  radio
  boolean
  text
}

enum member_role {
  admin
  manager
  associate
  freelancer
}

enum obj_status {
  active
  inactive
  deleted
}

enum file_type {
  image
  video
  audio
  document
}

enum task_status {
  pending
  in_progress
  completed
  accepted
  rejected
  cancelled
}

enum events {
  task_assignment_created
  task_assignment_updated
  task_assignment_deleted
  task_assignment_reviewed
  workflow_file_created
  workflow_file_updated
  workflow_file_deleted
  question_added
  question_deleted
}

enum request_method {
  POST
  PUT
}

model workflow {
  id             Int             @id @default(autoincrement())
  uuid           String          @unique @default(uuid()) @db.Char(36)
  name           String
  desc           String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?
  status         obj_status      @default(active)
  tasks          task[]
  workflow_items workflow_file[]
  webhooks       webhook[]
  child_id       Int?            @unique
  child          workflow?       @relation("child", fields: [child_id], references: [id])
  parent         workflow?       @relation("child")
  enforce_region Boolean         @default(false)
}

model workflow_file {
  id               Int               @id @default(autoincrement())
  uuid             String            @unique @default(uuid()) @db.Char(36)
  file_name        String
  file             String
  file_type        file_type         @default(audio)
  createdAt        DateTime          @default(now())
  receivedAt       DateTime?         @default(now())
  updatedAt        DateTime          @updatedAt
  deletedAt        DateTime?
  status           obj_status        @default(active)
  workflow         workflow          @relation(fields: [workflow_id], references: [id])
  workflow_id      Int
  file_duration    Float?
  task_assignments task_assignment[]
  district         String?
  state            String?
  vendor           String?
  metadata         Json?
  parent_id        Int?              @unique
  parent           workflow_file?    @relation("parent", fields: [parent_id], references: [id])
  child            workflow_file?    @relation("parent")
  calculated       Boolean           @default(false)
  delivered        Boolean           @default(false)
}

model question {
  id                  Int                        @id @default(autoincrement())
  uuid                String                     @unique @default(uuid()) @db.Char(36)
  name                String
  text                String
  order               Int                        @default(autoincrement())
  required            Boolean                    @default(true)
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @updatedAt
  deletedAt           DateTime?
  question_type       question_type              @default(boolean)
  options             String[]
  status              obj_status                 @default(active)
  task_question       task_question[]
  task_answers        task_answer[]
  intra_job_questions intra_pair_job_questions[]
  expected_answer     String?
}

model member {
  id                Int               @id @default(autoincrement())
  uuid              String            @unique @default(uuid()) @db.Char(36)
  name              String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime?         @updatedAt
  deletedAt         DateTime?
  email             String            @unique @default(uuid()) @db.VarChar(255)
  phone             String            @unique
  role              member_role       @default(freelancer)
  status            obj_status        @default(active)
  district          String?
  state             String?
  address           String?
  pincode           String?
  payment_details   Json?
  assignments       task_assignment[] @relation("assignee")
  reviews           task_assignment[] @relation("reviewer")
  intra_creator_of  intra_pair_job[]  @relation("intra_created_by")
  intra_assignee_of intra_pair_job[]  @relation("intra_assignee")
  added_by          Int?
  added_by_member   member?           @relation("added_by", fields: [added_by], references: [id])
  added_members     member[]          @relation("added_by")
}

model task {
  id               Int               @id @default(autoincrement())
  uuid             String            @unique @default(uuid()) @db.Char(36)
  name             String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  deletedAt        DateTime?
  status           obj_status        @default(active)
  workflow_id      Int
  workflow         workflow          @relation(fields: [workflow_id], references: [id])
  task_questions   task_question[]
  task_assignments task_assignment[]
  min_assignments  Int               @default(3)
  district         String?
  state            String?
}

model task_question {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique @default(uuid()) @db.Char(36)
  createdAt   DateTime @default(now())
  task_id     Int
  task        task     @relation(fields: [task_id], references: [id])
  question_id Int
  questions   question @relation(fields: [question_id], references: [id])
}

model task_assignment {
  id               Int           @id @default(autoincrement())
  uuid             String        @unique @default(uuid()) @db.Char(36)
  name             String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  status           task_status   @default(pending)
  task_id          Int
  task             task          @relation(fields: [task_id], references: [id], onDelete: Cascade)
  assignee_id      Int
  assignee         member        @relation(name: "assignee", fields: [assignee_id], references: [id])
  workflow_file_id Int
  workflow_file    workflow_file @relation(fields: [workflow_file_id], references: [id])
  task_answers     task_answer[]
  review_rating    Int?
  review_comments  String?
  reviewer_id      Int?
  reviewer         member?       @relation(name: "reviewer", fields: [reviewer_id], references: [id])

  @@unique([assignee_id, workflow_file_id, task_id])
}

model task_answer {
  id                 Int             @id @default(autoincrement())
  uuid               String          @unique @default(uuid()) @db.Char(36)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  task_assignment_id Int
  task_assigment     task_assignment @relation(fields: [task_assignment_id], references: [id], onDelete: Cascade)
  question_id        Int
  question           question        @relation(fields: [question_id], references: [id])
  answer             String          @db.VarChar(255)
  is_expected        Boolean?
}

model webhook {
  id          Int            @id @default(autoincrement())
  uuid        String         @unique @default(uuid()) @db.Char(36)
  name        String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?
  status      obj_status     @default(active)
  url         String
  method      request_method @default(POST)
  secret      String?        @db.VarChar(255)
  headers     Json?
  event       events
  workflow    workflow?      @relation(fields: [workflow_id], references: [id])
  workflow_id Int?
}

model intra_pair_job {
  id               Int               @id @default(autoincrement())
  uuid             String            @unique @default(uuid()) @db.Char(36)
  name             String            @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  deletedAt        DateTime?
  status           task_status       @default(pending)
  secret           String?           @db.VarChar(255)
  intra_pair_files intra_pair_file[]
  group_size       Int               @default(6)
  created_by_id    Int
  created_by       member            @relation(name: "intra_created_by", fields: [created_by_id], references: [id])
  assigned_to_id   Int?
  assigned_to      member?           @relation(name: "intra_assignee", fields: [assigned_to_id], references: [id])
  current_index    Int               @default(-1)
  threshold        Float             @default(1)
}

model intra_pair_job_questions {
  id          Int      @id @default(autoincrement())
  question_id Int
  questions   question @relation(fields: [question_id], references: [id])
}

enum confidence_level {
  low
  medium
  high
}

model intra_pair_file {
  id                Int              @id @default(autoincrement())
  uuid              String           @unique @default(uuid()) @db.Char(36)
  file_name         String
  file              String
  file_type         file_type        @default(audio)
  createdAt         DateTime         @default(now())
  receivedAt        DateTime?        @default(now())
  updatedAt         DateTime         @updatedAt
  deletedAt         DateTime?
  status            obj_status       @default(active)
  file_duration     Float?
  district          String?
  state             String?
  vendor            String?
  metadata          Json?
  cosine_score      Float?
  is_reference      Boolean          @default(false)
  is_similar        Boolean?
  confidence        confidence_level @default(low)
  intra_pair_job    intra_pair_job?  @relation(fields: [intra_pair_job_id], references: [id], onDelete: Cascade)
  intra_pair_job_id Int
}
