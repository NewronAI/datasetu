generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum question_type {
  checkbox
  radio
  boolean
  text
}

enum member_role{
  admin
  manager
  associate
  freelancer
}

enum obj_status{
  active
  inactive
  deleted
}

enum file_type{
  image
  video
  audio
  document
}



model workflow{
  id        BigInt   @id @default(sequence())

  uuid      String   @unique @default(uuid())
  name      String
  desc      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  status    obj_status @default(active)
  tasks task[]
  workflow_items workflow_file[]
}

model workflow_file{
  id        BigInt   @id @default(sequence())

  uuid      String   @unique @default(uuid())
  file_type file_type @default(audio)
  file      String
  file_name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  status    obj_status @default(active)
  workflow  workflow   @relation(fields: [workflowId], references: [id])
  workflowId BigInt
  file_duration Int?
  task_assignments task_assignment[]
  district  String?
  state     String?
}

model question{
  id        BigInt   @id @default(sequence())

  uuid      String   @unique @default(uuid())
  name      String
  text      String
  order     BigInt      @default(autoincrement())
  required  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  question_type      question_type @default(boolean)
  options   String[]
  status    obj_status @default(active)
  task_question task_question[]
  task_answers task_answer[]
}

model member {
  id        BigInt   @id @default(sequence())

  uuid      String   @unique @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  email     String  @unique
  phone     String @unique
  role      member_role @default(freelancer)
  status    obj_status @default(active)
  district String?
  state     String?
  address   String?
  pincode   String?
  payment_details Json?
}

model task{
  id        BigInt   @id @default(sequence())

  uuid      String   @unique @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  status    obj_status @default(active)
  workflow_id BigInt
  workflow  workflow @relation(fields: [workflow_id], references: [id])
  task_question_id Int
  task_questions task_question[]
  task_assignments task_assignment[]
  min_assignments Int @default(3)
  district String?
  state     String?
}

model task_question{
  id       BigInt      @default(autoincrement()) @id
  uuid      String   @unique @default(uuid())
  createdAt DateTime @default(now())
  task_id BigInt
  task task @relation(fields: [task_id], references: [id])
  question_id BigInt
  question question @relation(fields: [question_id], references: [id])
}

model task_assignment{
  id        BigInt   @id @default(sequence())

  uuid      String   @unique @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  status    obj_status @default(active)
  task_definition_id BigInt
  task_definitions task @relation(fields: [task_definition_id], references: [id])
  task_answers task_answer[]
  workflow_file_id BigInt
  workflow_file workflow_file @relation(fields: [workflow_file_id], references: [id])
}

model task_answer{
  id        BigInt   @id @default(sequence())

  uuid      String   @unique @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  status    obj_status @default(active)
  task_id BigInt
  task task_assignment @relation(fields: [task_id], references: [id])
  question_id BigInt
  questions question @relation(fields: [question_id], references: [id])
  answer String
}


